[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "alphadev"
version = "0.1.0"
description = "AlphaDev package with ACME and Reverb backend."
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
authors = [
    { name = "Miklos Hamar", email = "miklos.hamar@student.uva.nl" }
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Operating System :: OS Independent",
]
dependencies = [
    # Dependencies from your src/alphadev/requirements.txt:
    "atari-py",
    "click",
    # dm-acme submodule (editable install from local path):
    "dm-acme @ {root:uri}/acme", # Changed from file:./acme
    "dm-control",
    "dm-env",
    "dm-sonnet",
    "dm-reverb==0.14.0",
    "dm-reverb[tensorflow]",
    "dm-tree",
    "flax",
    "jax==0.4.6",
    "jaxlib==0.4.6",
    "matplotlib",
    "ml-collections",
    "optax",
    "optree",
    "pandas",
    "patsy",
    "pillow",
    "scipy",
    "tensorflow==2.15.1",
    "tensorflow-probability",
    "tqdm",
    "wandb",

    # tinyfive submodule (editable install from local path):
    "tinyfive @ {root:uri}/tinyfive" # Changed from file:./tinyfive
]

[project.urls]
"Homepage" = "https://github.com/MJHamar/alphadev"
# "Bug Tracker" = "..."
# "Source Code" = "..."

# [tool.hatch.build.targets.wheel]
# # This section is intentionally left commented out.
# # For hatchling to correctly package your 'alphadev' code, you should restructure it.
# # Move all Python files and sub-packages belonging to 'alphadev'
# # (e.g., alphadev_acme.py, utils.py, config.py, agents/, distribution/, etc.)
# # into a new subdirectory: src/alphadev/alphadev/
# # Also, create an empty src/alphadev/alphadev/__init__.py file.
# # If you follow this structure, hatchling will automatically discover and package 'alphadev'.
# # If you cannot restructure, you would uncomment and configure this, for example:
# # packages = {"src" = "alphadev"} # If your code was in src/alphadev/src/
# # Or if files are directly in src/alphadev/ (less ideal):
# # packages = {"." = "alphadev"}
# # and then use 'include'/'exclude' patterns carefully.

[tool.hatch.envs.default]
skip-install = true # Avoids hatch installing the project itself in the default env

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build]
# If you create src/alphadev/alphadev/ and put your package's code there:
# This tells hatch to look for a directory named 'alphadev' (src/alphadev/alphadev)
# and package its contents as the 'alphadev' package.
packages = ["alphadev"]
# Ensure you have an __init__.py in src/alphadev/alphadev/
# All .py files and subdirectories (like agents/, config/) should be moved into src/alphadev/alphadev/
# The submodules 'acme' and 'tinyfive' should remain at src/alphadev/acme and src/alphadev/tinyfive.
